package com.example.reclutamiento.RECLUTAMIENTO;import android.Manifest;import android.app.AlertDialog;import android.app.DatePickerDialog;import android.app.ProgressDialog;import android.content.Intent;import android.content.pm.PackageManager;import android.net.Uri;import android.os.Bundle;import android.view.ActionMode;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.Button;import android.widget.DatePicker;import android.widget.EditText;import android.widget.ImageButton;import android.widget.ProgressBar;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.JsonArrayRequest;import com.android.volley.toolbox.Volley;import com.example.reclutamiento.INCLUDES.ProcesoPostulancionRequest;import com.example.reclutamiento.MainActivityMenuRec;import com.example.reclutamiento.R;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.OnFailureListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.android.gms.tasks.Task;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.storage.FirebaseStorage;import com.google.firebase.storage.OnProgressListener;import com.google.firebase.storage.StorageReference;import com.google.firebase.storage.UploadTask;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.Calendar;public class MainActivityComentarios extends AppCompatActivity implements View.OnClickListener {    //declaracion de variables    String id_usuario,tag;    ImageButton uploadFile,imgbtnfechainiproceso, imgbtnfechafinproceso,imgbtnbuscaidproceso,imgbtnmenu;    EditText edtxtfechainicioproceso,edtxtfechafinproceso,edtxtidproceso;    Spinner spEleccion;    Button btnEnviarComen, btnsubir;    TextView txtfile,txtnombreproceso;    String file_path=null;    ProgressBar progresscomen;    Uri uriComent;    ProgressDialog progressDialog;    FirebaseStorage storage;    FirebaseDatabase database;    public int dia,mes,anio;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main_comentarios);        //variables que se reviben del activity anterior        Bundle global = getIntent().getExtras();        id_usuario = global.getString("id");        tag = global.getString("tag");        //obtencion de ID         uploadFile = findViewById(R.id.imgbtnUploadComen);         spEleccion = findViewById(R.id.spProceso);         btnEnviarComen = findViewById(R.id.btnenviacomentarios);         btnsubir = findViewById(R.id.btnsubir);         txtfile = findViewById(R.id.txtfile);         imgbtnfechainiproceso = findViewById(R.id.imgbtnfechaIniProceso);         imgbtnfechafinproceso = findViewById(R.id.imgbtnfechafinProceso);         imgbtnbuscaidproceso= findViewById(R.id.imgbtnbusidproceso);         edtxtfechainicioproceso = findViewById(R.id.edtxtFechaInicioPro);         edtxtfechafinproceso = findViewById(R.id.edtxtfechafinpro);         edtxtidproceso = findViewById(R.id.edtxtidproceso);         progresscomen = findViewById(R.id.progresscomen);         txtnombreproceso = findViewById(R.id.txtnombreproceso);         imgbtnmenu=findViewById(R.id.imgbtnmenu);        storage = FirebaseStorage.getInstance();//regresa un objeto de firebase storage        database = FirebaseDatabase.getInstance(); //regresa un objeto de firebase darabase        imgbtnmenu.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intentmenu = new Intent(MainActivityComentarios.this, MainActivityMenuRec.class);                startActivity(intentmenu);            }        });        //selecciona archivo         uploadFile.setOnClickListener(new View.OnClickListener() {             @Override             public void onClick(View v) {                 if(ContextCompat.checkSelfPermission(MainActivityComentarios.this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED){                     SelectComent();                 }                 else{                     ActivityCompat.requestPermissions(MainActivityComentarios.this,new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},10);                 }             }         });        //carga archivo         btnsubir.setOnClickListener(new View.OnClickListener() {             @Override             public void onClick(View v) {                 if(uriComent!=null){                     uploadDocComen(uriComent);                 }else{                     Toast.makeText(MainActivityComentarios.this,"por favor selecciona un archivo",Toast.LENGTH_SHORT).show();                 }             }         });        //validaciones copy and paste        edtxtidproceso.setCustomSelectionActionModeCallback(new ActionMode.Callback() {            @Override            public boolean onCreateActionMode(ActionMode mode, Menu menu) {                //se prepara la alerta creando nueva instancia                AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(MainActivityComentarios.this);                //seleccionamos la cadena a mostrar                dialogBuilder.setMessage("Por motivos de seguridad esta función esta desactivada");                //elegimo un titulo y configuramos para que se pueda quitar                dialogBuilder.setCancelable(true).setTitle("Mensaje");                //mostramos el dialogBuilder                dialogBuilder.create().show();                return false;            } @Override public boolean onPrepareActionMode(ActionMode mode, Menu menu) {                return false;            } @Override public boolean onActionItemClicked(ActionMode mode, MenuItem item) {                return false;            } @Override public void onDestroyActionMode(ActionMode mode) {            }});        //validaciones copy and paste        edtxtfechainicioproceso.setCustomSelectionActionModeCallback(new ActionMode.Callback() {            @Override            public boolean onCreateActionMode(ActionMode mode, Menu menu) {                //se prepara la alerta creando nueva instancia                AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(MainActivityComentarios.this);                //seleccionamos la cadena a mostrar                dialogBuilder.setMessage("Por motivos de seguridad esta función esta desactivada");                //elegimo un titulo y configuramos para que se pueda quitar                dialogBuilder.setCancelable(true).setTitle("Mensaje");                //mostramos el dialogBuilder                dialogBuilder.create().show();                return false;            } @Override public boolean onPrepareActionMode(ActionMode mode, Menu menu) {                return false;            } @Override public boolean onActionItemClicked(ActionMode mode, MenuItem item) {                return false;            } @Override public void onDestroyActionMode(ActionMode mode) {            }});         //carga calendario        imgbtnfechainiproceso.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //SELECCIONAR FECHA DE INICIO                if (v == imgbtnfechainiproceso){                    final Calendar c = Calendar.getInstance();                    dia = c.get(Calendar.DAY_OF_MONTH);                    mes = c.get(Calendar.MONTH);                    anio = c.get(Calendar.YEAR);                    DatePickerDialog datePickerDialog = new DatePickerDialog(MainActivityComentarios.this, new DatePickerDialog.OnDateSetListener() {                        @Override                        public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {                            edtxtfechainicioproceso.setText(dayOfMonth+"/"+(month+1)+"/"+year);                        }                    }, anio, mes, dia);                    datePickerDialog.show();                    //SELECCIONAR FECHA FIN                }            }        });        //validaciones copy and paste        edtxtfechafinproceso.setCustomSelectionActionModeCallback(new ActionMode.Callback() {            @Override            public boolean onCreateActionMode(ActionMode mode, Menu menu) {                //se prepara la alerta creando nueva instancia                AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(MainActivityComentarios.this);                //seleccionamos la cadena a mostrar                dialogBuilder.setMessage("Por motivos de seguridad esta función esta desactivada");                //elegimo un titulo y configuramos para que se pueda quitar                dialogBuilder.setCancelable(true).setTitle("Mensaje");                //mostramos el dialogBuilder                dialogBuilder.create().show();                return false;            } @Override public boolean onPrepareActionMode(ActionMode mode, Menu menu) {                return false;            } @Override public boolean onActionItemClicked(ActionMode mode, MenuItem item) {                return false;            } @Override public void onDestroyActionMode(ActionMode mode) {            }});        imgbtnfechafinproceso.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //SELECCIONAR FECHA DE INICIO                if (v == imgbtnfechafinproceso){                    final Calendar c = Calendar.getInstance();                    dia = c.get(Calendar.DAY_OF_MONTH);                    mes = c.get(Calendar.MONTH);                    anio = c.get(Calendar.YEAR);                    DatePickerDialog datePickerDialog = new DatePickerDialog(MainActivityComentarios.this, new DatePickerDialog.OnDateSetListener() {                        @Override                        public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {                            edtxtfechafinproceso.setText(dayOfMonth+"/"+(month+1)+"/"+year);                        }                    }, anio, mes, dia);                    datePickerDialog.show();                    //SELECCIONAR FECHA FIN                }            }        });            //busca postulante        imgbtnbuscaidproceso.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                buscaPostulante("http://45.40.160.177/APPRH/reclutamiento/buscaPostulanteDetalle.php?idPostulante="+edtxtidproceso.getText()+"");            }        });        //envia comentarios        btnEnviarComen.setOnClickListener(this);    }    private void uploadDocComen(Uri uriComent) {        progressDialog = new ProgressDialog(this);        progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);        progressDialog.setTitle("Cargando archivo");        progressDialog.setProgress(0);        progressDialog.show();        String filename = System.currentTimeMillis()+"";        StorageReference storageReference = storage.getReference(); //regresa path        storageReference.child("UploadsComentarios").child(filename).putFile(uriComent)                .addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {                    @Override                    public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {                        String url =taskSnapshot.getStorage().getDownloadUrl().toString();                        DatabaseReference reference = database.getReference();                        reference.child(filename).setValue(url).addOnCompleteListener(new OnCompleteListener<Void>() {                            @Override                            public void onComplete(@NonNull Task<Void> task) {                                if(task.isSuccessful())                                    Toast.makeText(MainActivityComentarios.this,"archivo cargado correctamente",Toast.LENGTH_SHORT).show();                                else                                    Toast.makeText(MainActivityComentarios.this,"archivo no cargado",Toast.LENGTH_SHORT).show();                            }                        });                    }                }).addOnFailureListener(new OnFailureListener() {            @Override            public void onFailure(@NonNull Exception e) {                Toast.makeText(MainActivityComentarios.this,"archivo no cargado",Toast.LENGTH_SHORT).show();            }        }).addOnProgressListener(new OnProgressListener<UploadTask.TaskSnapshot>() {            @Override            public void onProgress(@NonNull UploadTask.TaskSnapshot snapshot) {                int progress = (int)(100*snapshot.getBytesTransferred()/snapshot.getTotalByteCount());                progressDialog.setProgress(progress);            }        });    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        if(requestCode ==10 && grantResults[0]==PackageManager.PERMISSION_GRANTED){            SelectComent();        }        else{            Toast.makeText(MainActivityComentarios.this,"por favor acepta los permisos para cargar archivos",Toast.LENGTH_SHORT).show();        }    }    private void SelectComent() {        //Intente para cargar archivos        Intent intent = new Intent();        intent.setType("application/*");        intent.setAction(Intent.ACTION_GET_CONTENT);        startActivityForResult(intent,100);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if(requestCode == 100 && resultCode == RESULT_OK && data!=null){            uriComent=data.getData(); //regresa la uri del archivo seleccionado            txtfile.setText("Archivo seleccionado:"+data.getData().getLastPathSegment());        }else{            Toast.makeText(MainActivityComentarios.this,"por favor selecciona un archivo",Toast.LENGTH_SHORT).show();        }    }    //metodo para buscar postulante mediante ID    private void buscaPostulante(String url) {        JsonArrayRequest jsonArrayRequest  = new JsonArrayRequest(url, new Response.Listener<JSONArray>() {            @Override            public void onResponse(JSONArray response) {                JSONObject jsonObject = null;                for (int b = 0; b < response.length(); b++) {                    try {                        jsonObject = response.getJSONObject(b);                        String nombreP = jsonObject.getString("nombre");                        String apPaP = jsonObject.getString("apPaterno");                        String apMaP = jsonObject.getString("apMaterno");                        txtnombreproceso.setText(nombreP+" "+apPaP+" "+apMaP);                    } catch (JSONException e) {                        Toast.makeText(MainActivityComentarios.this, e.toString(), Toast.LENGTH_SHORT).show();                    }                }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                Toast.makeText(MainActivityComentarios.this,"Error de consulta, o el dato no existe",Toast.LENGTH_SHORT).show();            }        });        RequestQueue requestQueue = Volley.newRequestQueue(MainActivityComentarios.this);        requestQueue.add(jsonArrayRequest);    }    @Override    public void onClick(View v) {        //validacion de spinner proceso y se enviar proceso de acuerdo a la eleccion       final String estatusProceso = spEleccion.getSelectedItem().toString();       String resultadoP1="Ok";       String resultadoP2 ="Ok";        final String fechaInicio = edtxtfechainicioproceso.getText().toString();        final String fechafin = edtxtfechafinproceso.getText().toString();        final int idproceso = Integer.parseInt(edtxtidproceso.getText().toString());        //definir elemento response        Response.Listener<String> responseListener =  new Response.Listener<String>() {            @Override            public void onResponse(String response) {                //declaración de objeto tipo json                try {                    JSONObject jsonObject = new JSONObject(response);                    //declaración variable boolean                    Boolean success = jsonObject.getBoolean("success");                    //condición sis e realizo de forma exitosa el registro                    if(success){                        //se prepara la alerta creando nueva instancia                        AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(MainActivityComentarios.this);                        //seleccionamos la cadena a mostrar                        dialogBuilder.setMessage("Se han enviado comentarios forma exitosa");                        //elegimo un titulo y configuramos para que se pueda quitar                        dialogBuilder.setCancelable(true).setTitle("Mensaje");                        //mostramos el dialogBuilder                        dialogBuilder.create().show();                        edtxtfechainicioproceso.getText().clear(); edtxtfechafinproceso.getText().clear(); edtxtidproceso.getText().clear();                        txtnombreproceso.setText("");                        //Toast.makeText(getApplicationContext(),"Registro exitoso",Toast.LENGTH_SHORT).show();                    }else{                        //se prepara la alerta creando nueva instancia                        AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(MainActivityComentarios.this);                        //seleccionamos la cadena a mostrar                        dialogBuilder.setMessage("No se enviaron los comentarios, verifica la información ingresada");                        //elegimo un titulo y configuramos para que se pueda quitar                        dialogBuilder.setCancelable(true).setTitle("Error");                        //mostramos el dialogBuilder                        dialogBuilder.create().show();                        //Toast.makeText(getApplicationContext(),"No se realizo el registro, verifica la información ingresada",Toast.LENGTH_SHORT).show();                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }        };        //declaración de objeto de tipo vacanteRequest        ProcesoPostulancionRequest vacanteRequest = new ProcesoPostulancionRequest(estatusProceso,fechaInicio,fechafin,resultadoP1,resultadoP2,idproceso, responseListener);        //definición clase requestQueue        RequestQueue requestQueue = Volley.newRequestQueue(MainActivityComentarios.this);        requestQueue.add(vacanteRequest);    }}